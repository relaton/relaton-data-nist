---
schema-version: v1.2.8
id: NISTIR8165-upd1
title:
- content: Impact of Code Complexity On Software Analysis
  language:
  - en
  script:
  - Latn
  format: text/plain
link:
- content: https://doi.org/10.6028/NIST.IR.8165-upd1
  type: doi
- content: https://nvlpubs.nist.gov/nistpubs/ir/2023/NIST.IR.8165-upd1.pdf
  type: pdf
type: standard
docid:
- id: NIST IR 8165-upd1
  type: NIST
  primary: true
- id: 10.6028/NIST.IR.8165-upd1
  type: DOI
date:
- type: published
  value: '2023-02-23'
contributor:
- person:
    name:
      given:
        forename:
        - content: Charles
          script:
          - Latn
          initial: D
        formatted_initials:
          content: D
          script:
          - Latn
      surname:
        content: De Oliveira
        script:
        - Latn
    affiliation:
    - organization:
        name:
        - content: Information Technology Laboratory
  role:
  - type: author
- person:
    name:
      given:
        forename:
        - content: Elizabeth
          script:
          - Latn
      surname:
        content: Fong
        script:
        - Latn
    affiliation:
    - organization:
        name:
        - content: Information Technology Laboratory
  role:
  - type: author
- person:
    name:
      given:
        forename:
        - content: Paul
          script:
          - Latn
          initial: E
        formatted_initials:
          content: E.
          script:
          - Latn
      surname:
        content: Black
        script:
        - Latn
    affiliation:
    - organization:
        name:
        - content: Information Technology Laboratory
  role:
  - type: author
- organization:
    name:
    - content: National Institute of Standards and Technology
    contact:
    - address:
        city: Gaithersburg
        state: MD
        country: US
  role:
  - type: publisher
revdate: '2023-02-23'
script:
- Latn
abstract:
- content: The Software Assurance Metrics and Tool Evaluation (SAMATE) team studied
    thousands of warnings from static analyzers. Tools have difficulty distinguishing
    between the absence of a weakness and the presence of a weakness that is buried
    in otherwise-irrelevant code elements. This paper presents classes of these code
    elements, which we call "code complexities." They have been present in software
    assurance as part of test cases generation strategy when evaluating static analyzers.
    Benefits of using code complexity include the development of coding guidelines,
    boosting diversification of test cases.
  script:
  - Latn
  format: text/plain
series:
- title:
    content: NIST IR (Interagency/Internal Reports)
    format: text/plain
  abbreviation:
    content: IR
  number: 8165-upd1
doctype:
  type: standard
ext:
  schema-version: v1.0.0
